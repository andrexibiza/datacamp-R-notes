)
ggplot(msleep, aes(log10(bodywt), y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(-3, 4),
breaks = -3:4) +
annotation_logticks(sides = "b") # highlights log transformation
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
scale_x_log10(limits = c(1e-03, 1e+04))
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
coord_trans(x = "log10")
# Produce a scatter plot of brainwt vs. bodywt
ggplot(msleep, aes(x = bodywt, y = brainwt)) +
geom_point() +
ggtitle("Raw Values")
# Add scale_*_*() functions
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
ggtitle("Scale_ functions")
# Perform a log10 coordinate system transformation
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
coord_trans(x = "log10", y = "log10")
# Plot with a scale_*_*() function:
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 x scale
scale_x_log10() +
# Add a log10 y scale
scale_y_log10() +
ggtitle("Scale functions")
# Plot with transformed coordinates
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 coordinate transformation for x and y axes
coord_trans(x = "log10", y = "log10")
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE)
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
coord_flip()
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am
facet_grid(rows = vars(am))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am and columns by cyl
facet_grid(rows = vars(am), cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# The default is label_value
facet_grid(cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Displaying both the values and the variables
facet_grid(cols = vars(cyl), labeller = label_both)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Label context
facet_grid(cols = vars(cyl), labeller = label_context)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Two variables
facet_grid(cols = vars(vs, cyl), labeller = label_context)
# Make factor, set proper labels explictly
mtcars$fam <- factor(mtcars$am, labels = c(`0` = "automatic",
`1` = "manual"))
# Default order is alphabetical
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
# Make factor, set proper labels explictly, and
# manually set the label order
mtcars$fam <- factor(mtcars$am,
levels = c(1, 0),
labels = c("manual", "automatic"))
# View again
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Update the faceting to free the x-axis scales
facet_grid(cols = vars(cyl), scales = "free_x")
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Swap cols for rows; free the y-axis scales
facet_grid(rows = vars(cyl), scales = "free_y")
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Facet rows by gear
#   facet_grid(rows = vars(gear))
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Free the y scales and space
#   facet_grid(rows = vars(gear), scales = "free_y", space = "free_y")
library(carData)
data("Vocab")
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using vars()
facet_wrap(vars(year))
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using a formula
facet_wrap(~ year)
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Update the facet layout, using 11 columns
facet_wrap(~ year, ncol = 11)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Facet rows by fvs and cols by fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear))
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to add margins
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = TRUE)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = "fam")
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on gear and fvs
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = c("gear", "fvs"))
data(msleep)
sleep <- msleep[, c("vore", "sleep_total", "sleep_rem")] %>%
rename(total = sleep_total, rem = sleep_rem)
str(sleep)
d <- ggplot(sleep, aes(vore, total))
# ...
d +
stat_summary(fun = mean,
geom = "bar",
fill = "grey50") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
# position
posn_j <- position_jitter(width = 0.2)
# plot
d +
geom_point(alpha = 0.6,
position = posn_j)
d +
geom_point() +
stat_summary(fun = mean,
geom = "point",
fill = "red") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2,
color = "red")
d +
geom_point() +
stat_summary(fun.data = mean_sdl,
mult = 1,
width = 0.2,
color = "red")
d +
stat_summary(fun = mean,
geom = "point") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
library(lattice)
head(barley, 9)
ggplot(barley, aes(year, variety,
fill = yield)) +
geom_tile() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(yield, variety,
color = year)) +
geom_point() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(year, yield,
group = variety,
color = variety)) +
geom_line() +
facet_wrap(vars(site), nrow = 1)
install.packages("fst")
setwd("C:/Git/datacamp-R-notes/DataCamp_Intermediate-Regression-in-R")
# Load course data
library(fst)
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
library(readr)
auctions_raw <- read_csv("~/Downloads/361_760_bundle_archive/auction.csv")
# Load course data
library(fst)
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
library(readr)
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
# Load course data
library(fst)
library(readr)
library(dplyr)
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
write_fst(auctions, "auctions.fst")
View(auctions)
data(insight::fish)
install.packages("insight")
data(fish)
data(insight::fish)
# Load packages
library(fst)
library(readr)
library(dplyr)
library(ggplot2)
# Load course data
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
fish <- read_csv("data/fish.csv")
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
write_fst(auctions, "auctions.fst")
mdl_mass_vs_length <- lm(mass_g ~ length_cm, data = fish)
View(fish)
mdl_mass_vs_length <- lm(weight ~ length, data = fish)
mdl_mass_vs_length <- lm(weight ~ length, data = fish)
mdl_mass_vs_length
mdl_mass_vs_species <- lm(mass ~ species + 0, data = fish)
mdl_mass_vs_species <- lm(weight ~ species + 0, data = fish)
mdl_mass_vs_species
mdl_mass_vs_both <- lm(weight ~ length + species + 0, data = fish)
mdl_mass_vs_both
coefficients(mdl_mass_vs_length)
coefficients(mdl_mass_vs_species)
coefficients(mdl_mass_vs_both)
ggplot(fish, aes(length, weight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fish, aes(species, weight)) +
geom_boxplot() +
stat_summary(fun.y = mean, shape = 15)
install.packages("moderndive")
library(moderndive)
ggplot(fish, aes(length, weight, color = species)) +
geom_point() +
geom_parallel_slopes(se = FALSE)
distinct(fish$species)
fish %>% distinct(species)
# Load packages
library(fst)
library(readr)
library(dplyr)
library(ggplot2)
# Load course data
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
fish <- read_csv("data/fish.csv")
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
write_fst(auctions, "auctions.fst")
fish %>% distinct(species)
View(fish)
# Load packages
library(fst)
library(readr)
library(dplyr)
library(ggplot2)
# Load course data
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
fish <- read_csv("data/fish.csv") %>%
select(Species, Weight, Length3)
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
write_fst(auctions, "auctions.fst")
fish %>% distinct(Species)
mdl_mass_vs_length <- lm(weight ~ length, data = fish)
fish <- fish %>% filter(Species %in% c("Bream", "Roach", "Perch", "Pike"))
fish <- fish %>% filter(Species %in% c("Bream", "Roach", "Perch", "Pike"))
fish
fish <- fish %>%
filter(Species %in% c("Bream", "Roach", "Perch", "Pike")) %>%
rename(Species = species,
Weight = mass_g,
Length3 = length_cm)
fish <- fish %>%
filter(Species %in% c("Bream", "Roach", "Perch", "Pike")) %>%
rename(species = Species,
magg_g = Weight,
length_cm = Length3)
fish
fish <- fish %>%
filter(Species %in% c("Bream", "Roach", "Perch", "Pike")) %>%
rename(species = Species,
mass_g = Weight,
length_cm = Length3)
# Load packages
library(fst)
library(readr)
library(dplyr)
library(ggplot2)
# Load course data
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
fish <- read_csv("data/fish.csv") %>%
select(Species, Weight, Length3)
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
write_fst(auctions, "auctions.fst")
fish <- fish %>%
filter(Species %in% c("Bream", "Roach", "Perch", "Pike")) %>%
rename(species = Species,
mass_g = Weight,
length_cm = Length3)
fish
mdl_mass_vs_length <- lm(weight ~ length, data = fish)
mdl_mass_vs_length <- lm(mass_g ~ length_cm, data = fish)
mdl_mass_vs_length
mdl_mass_vs_species <- lm(mass_g ~ species + 0, data = fish)
mdl_mass_vs_species
mdl_mass_vs_both <- lm(mass_g ~ length_cm + species + 0, data = fish)
mdl_mass_vs_both
coefficients(mdl_mass_vs_length)
coefficients(mdl_mass_vs_species)
coefficients(mdl_mass_vs_both)
ggplot(fish, aes(length, weight)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fish, aes(length_cm, mass_g)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fish, aes(species, mass_g)) +
geom_boxplot() +
stat_summary(fun.y = mean, shape = 15)
library(moderndive)
ggplot(fish, aes(length_cm, mass_g, color = species)) +
geom_point() +
geom_parallel_slopes(se = FALSE)
explanatory_data <- tibble(
length_cm = seq(5, 60, 5)
)
glimpse(explanatory_data)
explanatory_data <- tibble(
length_cm = seq(5, 60, 5),
species = unique(fish$species))
explanatory_data <- expand_grid(
length_cm = seq(5, 60, 5),
species = unique(fish$species))
# Load packages
library(fst)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
# Load course data
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
fish <- read_csv("data/fish.csv") %>%
select(Species, Weight, Length3)
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
write_fst(auctions, "auctions.fst")
# Load packages
library(fst)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
# Load course data
churn <- read.fst("data/churn.fst")
taiwan <- read.fst("data/taiwan_real_estate2.fst")
fish <- read_csv("data/fish.csv") %>%
select(Species, Weight, Length3)
# Downloaded from https://www.kaggle.com/onlineauctions/online-auctions-dataset
auctions_raw <- read_csv("data/auction.csv")
# Palm pilot has most data, no outliers
auctions <- auctions_raw %>%
filter(item == "Palm Pilot M515 PDA") %>%
select(price, openbid, auction_type)
write_fst(auctions, "auctions.fst")
# `fish` data from https://www.kaggle.com/datasets/vipullrathod/fish-market
# Filtering Kaggle data for species of interest to match course materials
fish <- fish %>%
filter(Species %in% c("Bream", "Roach", "Perch", "Pike")) %>%
rename(species = Species,
mass_g = Weight,
length_cm = Length3)
fish
mdl_mass_vs_length <- lm(mass_g ~ length_cm, data = fish)
mdl_mass_vs_length
mdl_mass_vs_species <- lm(mass_g ~ species + 0, data = fish)
mdl_mass_vs_species
mdl_mass_vs_both <- lm(mass_g ~ length_cm + species + 0, data = fish)
mdl_mass_vs_both
coefficients(mdl_mass_vs_length)
coefficients(mdl_mass_vs_species)
coefficients(mdl_mass_vs_both)
ggplot(fish, aes(length_cm, mass_g)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(fish, aes(species, mass_g)) +
geom_boxplot() +
stat_summary(fun.y = mean, shape = 15)
library(moderndive)
ggplot(fish, aes(length_cm, mass_g, color = species)) +
geom_point() +
geom_parallel_slopes(se = FALSE)
explanatory_data <- tibble(
length_cm = seq(5, 60, 5)
)
glimpse(explanatory_data)
explanatory_data <- expand_grid(
length_cm = seq(5, 60, 5),
species = unique(fish$species))
)
explanatory_data <- expand_grid(
length_cm = seq(5, 60, 5),
species = unique(fish$species)
)
glimpse(explanatory_data)
prediction_data <- explanatory_data %>%
mutate(
mass_g = predict(mdl_mass_vs_length, explanatory_data
)
)
prediction_data <- explanatory_data %>%
mutate(
mass_g = predict(mdl_mass_vs_both, explanatory_data
)
)
prediction_data <- explanatory_data %>%
mutate(
mass_g = predict(mdl_mass_vs_both, explanatory_data
)
)
prediction_data
library(ggplot2)
library(moderndive)
ggplot(fish, aes(length_cm, mass_g, color = species)) +
geom_point() +
geom_parallel_slopes(se = FALSE) +
geom_point(
data = prediction_data,
size = 3, shape = 15
)
coeffs <- coefficients(mdl_mass_vs_length)
coeffs
intercept <- coeffs[1]
slope <- coeffs[2]
explanatory_data %>%
mutate(
mass_g = intercept + slope * length_cm
)
explanatory_data
