"flavor",
"moistness"
)
# Import all data, but force all columns to be character: potatoes_char
potatoes_char <- read_tsv("datasets/potatoes.txt",
col_types = "cccccccc",
col_names = properties
)
# Print out structure of potatoes_char
print(str(potatoes_char))
# readr is already loaded
# Import without col_types
hotdogs <- read_tsv("datasets/hotdogs.txt",
col_names = c("type",
"calories",
"sodium"
)
)
# Display the summary of hotdogs
summary(hotdogs)
# The collectors you will need to import the data
fac <- col_factor(levels = c("Beef",
"Meat",
"Poultry"
)
)
int <- col_integer()
# Edit the col_types argument to import the data correctly: hotdogs_factor
hotdogs_factor <- read_tsv("datasets/hotdogs.txt",
col_names = c("type",
"calories",
"sodium"
),
col_types = list(fac,
int,
int
)
)
# Display the summary of hotdogs_factor
summary(hotdogs_factor)
# install.packages("data.table")
library(data.table)
# load the data.table package using library()
library(data.table)
# Import potatoes.csv with fread(): potatoes
potatoes <- fread("datasets/potatoes.csv")
# Print out potatoes
print(potatoes)
# fread is already loaded
# Import columns 6 and 8 of potatoes.csv: potatoes
potatoes <- fread("datasets/potatoes.csv",
select=c(6,8)
)
# Plot texture (x) and moistness (y) of potatoes
plot(x=potatoes$texture,
y=potatoes$moistness
)
# install.packages("readxl")
library(readxl)
excel_sheets("datasets/urbanpop.xlsx")
read_excel("datasets/urbanpop.xlsx")
read_excel("datasets/urbanpop.xlsx", sheet = "1975-2011")
# Load the readxl package
library(readxl)
# Print the names of all worksheets
excel_sheets("datasets/urbanpop.xlsx")
# The readxl package is already loaded
# Read the sheets, one by one
pop_1 <- read_excel("datasets/urbanpop.xlsx", sheet = 1)
pop_2 <- read_excel("datasets/urbanpop.xlsx", sheet = 2)
pop_3 <- read_excel("datasets/urbanpop.xlsx", sheet = 3)
# Put pop_1, pop_2 and pop_3 in a list: pop_list
pop_list <- list(pop_1, pop_2, pop_3)
# Display the structure of pop_list
str(pop_list)
# The readxl package is already loaded
# Read all Excel sheets with lapply(): pop_list
pop_list <- lapply(excel_sheets("datasets/urbanpop.xlsx"),
read_excel,
path = "datasets/urbanpop.xlsx")
# Display the structure of pop_list
str(pop_list)
# read_excel(path,
#            sheet = 1,
#            col_names = TRUE, #TRUE/FALSE/char vector
#            col_types = NULL,
#            skip = 0   # num rows to skip before importing data
# )
read_excel("datasets/cities.xlsx",
col_types = c("text",
"text"
)
)
read_excel("datasets/cities.xlsx",
col_types = c("text",
"blank"
)
)
read_excel("datasets/cities.xlsx",
col_names = c("Capital",  # must specify since skipped
"Population"
),
skip = 2
)
# The readxl package is already loaded
# Import the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a
pop_a <- read_excel("datasets/urbanpop_nonames.xlsx",
col_names = FALSE
)
# Import the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b
cols <- c("country", paste0("year_", 1960:1966)
)
pop_b <- read_excel("datasets/urbanpop_nonames.xlsx",
col_names = cols
)
# Print the summary of pop_a
summary(pop_a)
# Print the summary of pop_b
summary(pop_b)
# The readxl package is already loaded
# Import the second sheet of urbanpop.xlsx, skipping the first 21 rows: urbanpop_sel
urbanpop_sel <- read_excel("datasets/urbanpop.xlsx",
sheet = 2,
skip = 21,
col_names = FALSE
)
# Print out the first observation from urbanpop_sel
print(urbanpop_sel[1,])
# install.packages("XLConnect")
library("XLConnect")
book <- loadWorkbook("datasets/cities.xlsx")
str(book)
getSheets(book)
library(readxl)
excel_sheets("datasets/cities.xlsx")
readWorksheet(book, sheet = "Sheet1")
readWorksheet(book,
sheet ="Sheet1",
startRow =3,
endRow = 4,
startCol = 2,
header = FALSE)
# urbanpop.xlsx is available in your working directory
# Load the XLConnect package
library(XLConnect)
# Build connection to urbanpop.xlsx: my_book
my_book <- loadWorkbook("datasets/urbanpop.xlsx")
# Print out the class of my_book
print(class(my_book))
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book <- loadWorkbook("datasets/urbanpop.xlsx")
# List the sheets in my_book
getSheets(my_book)
# Import the second sheet in my_book
print(readWorksheet(my_book, sheet = 2))
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book <- loadWorkbook("datasets/urbanpop.xlsx")
# Import columns 3, 4, and 5 from second sheet in my_book: urbanpop_sel
urbanpop_sel <- readWorksheet(my_book,
sheet = 2,
startCol = 3,
endCol = 5
)
# Import first column from second sheet in my_book: countries
countries <- readWorksheet(my_book,
sheet = 2,
startCol = 1,
endCol = 1
)
# cbind() urbanpop_sel and countries together: selection
selection <- cbind(countries,
urbanpop_sel
)
pop_2010 <- data.frame(
Capital = c("New York", "Berlin", "Madrid", "Stockholm"),
Population = c(8191900, 3460725, 3273000, 1372565)
)
pop_2010
library(XLConnect)
book <- loadWorkbook("datasets/cities.xlsx")
createSheet(book, name = "year_2010")
writeWorksheet(book, pop_2010, sheet = "year_2010")
saveWorkbook(book, file = "datasets/cities2.xlsx")
getSheets(book)
# renameSheet(book, "Sheet1", "Y2000")
# renameSheet(book, "year_2010", "Y2010")
# saveWorkbook(book, file = "datasets/cities3.xlsx")
# removeSheet(book, sheet = "Y2010")
# saveWorkbook(book, file = "datasets/cities4.xlsx")
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book <- loadWorkbook("datasets/urbanpop.xlsx")
# Add a worksheet to my_book, named "data_summary"
createSheet(my_book, name = "data_summary")
# Use getSheets() on my_book
getSheets(my_book)
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book <- loadWorkbook("datasets/urbanpop.xlsx")
# Add a worksheet to my_book, named "data_summary"
createSheet(my_book, "data_summary")
# Create data frame: summ
sheets <- getSheets(my_book)[1:3]
dims <- sapply(sheets, function(x) dim(readWorksheet(my_book, sheet = x)), USE.NAMES = FALSE)
summ <- data.frame(sheets = sheets,
nrows = dims[1, ],
ncols = dims[2, ])
# Add data in summ to "data_summary" sheet
writeWorksheet(my_book, data=summ, sheet="data_summary")
# Save workbook as summary.xlsx
saveWorkbook(my_book, "datasets/summary.xlsx")
# # Build connection to urbanpop.xlsx: my_book
# my_book <- loadWorkbook("datasets/urbanpop.xlsx")
#
# # Rename "data_summary" sheet to "summary"
# renameSheet(my_book, "data_summary", "summary")
#
# # Print out sheets of my_book
# print(getSheets(my_book))
#
# # Save workbook to "renamed.xlsx"
# saveWorkbook(my_book, "datasets/renamed.xlsx")
# # Load the XLConnect package
# library(XLConnect)
#
# # Build connection to renamed.xlsx: my_book
# my_book <- loadWorkbook("renamed.xlsx")
#
# # Remove the fourth sheet
# removeSheet(my_book, sheet = 4)
#
# # Save workbook to "clean.xlsx"
# saveWorkbook(my_book, file = "clean.xlsx")
View(potatoes_char)
library(gapminder)
library(gapminder)
library(dplyr)
gapminder
gapminder %>%
filter(year == 2007)
gapminder %>%
filter(country == "United States")
gapminder %>%
filter(year == 2007, country == "United States")
gapminder %>%
arrange(gdpPercap)
gapminder %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(year == 2007) %>%
arrange(desc(gdpPercap))
gapminder %>%
mutate(pop = pop / 1000000)
gapminder %>%
mutate(gdp = gdpPercap * pop)
gapminder %>%
mutate(gdp = gdpPercap * pop) %>%
filter(year == 2007) %>%
arrange(desc(gdp))
gapminder_2007 <- gapminder %>%
filter(year == 2007)
gapminder_2007
library(ggplot2)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point()
>labs
?labs
library(ggplot2)
library(ggthemes)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point()
+ theme_wsj()
library(ggplot2)
library(ggthemes)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point() +
theme_wsj() +
labs(title = "Life Expectancy vs. GDP per Capita",
subtitle = "Source: gapminder",
xlab = "GDP per Capita",
ylab = "Life Expectancy"
)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point() +
theme_wsj() +
labs(title = "Life Expectancy vs. GDP per Capita",
xlab = "GDP per Capita",
ylab = "Life Expectancy"
)
library(ggplot2)
library(ggthemes)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point() +
theme_minimal() +
labs(title = "Life Expectancy vs. GDP per Capita",
xlab = "GDP per Capita",
ylab = "Life Expectancy"
)
library(ggplot2)
library(ggthemes)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point() +
labs(title = "Life Expectancy vs. GDP per Capita",
xlab = "GDP per Capita",
ylab = "Life Expectancy"
)
library(ggplot2)
library(ggthemes)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point() +
labs(title = "Life Expectancy vs. GDP per Capita",
xlab = "GDP per Capita",
ylab = "Life Expectancy"
)
library(ggplot2)
library(ggthemes)
ggplot(gapminder_2007, aes(
x = gdpPercap,
y = lifeExp
)
) + geom_point() +
ggtitle("Life Expectancy vs. GDP per Capita") +
xlab("GDP per Capita") +
ylab("Life Expectancy")
library(ggplot2)
ggplot(gapminder, aes(x = gdpPercap,
y = lifeExp
)
) + geom_point()
ggplot(gapminder, aes(x = gdpPercap,
y = lifeExp)
) + geom_point() +
scale_x_log10()
ggplot(gapminder, aes(x = gdpPercap,
y = lifeExp,
color = continent)
) + geom_point() +
scale_x_log10()
ggplot(gapminder, aes(x = gdpPercap,
y = lifeExp,
color = continent)
) + geom_point() +
scale_x_log10() +
geom_jitter()
ggplot(gapminder, aes(x = gdpPercap,
y = lifeExp,
color = continent,
size = pop)
) + geom_point() +
scale_x_log10() +
geom_jitter()
library(ggplot2)
ggplot(gapminder_2007, aes(x = gdpPercap,
y = lifeExp
)
) + geom_point()
ggplot(gapminder_2007, aes(x = gdpPercap,
y = lifeExp)
) + geom_point() +
scale_x_log10()
ggplot(gapminder_2007, aes(x = gdpPercap,
y = lifeExp,
color = continent)
) + geom_point() +
scale_x_log10() +
geom_jitter()
ggplot(gapminder_2007, aes(x = gdpPercap,
y = lifeExp,
color = continent,
size = pop)
) + geom_point() +
scale_x_log10() +
geom_jitter()
ggplot(gapminder_2007, aes(x = gdpPercap,
y = lifeExp,
color = continent,
size = pop)
) + geom_point() +
scale_x_log10() +
geom_jitter() +
theme_minimal()
ggplot(gapminder_2007, aes(x = gdpPercap,
y = lifeExp)) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent)
gapminder %>%
filter(country = "United States, year == 2007")
gapminder %>%
filter(country = "United States", year == 2007)
gapminder %>%
filter(country == "United States", year == 2007)
gapminder %>%
summarize(meanLifeExp = mean(lifeExp))
gapminder %>%
filter(year == 2007) %>%
summarize(meanLifeExp = mean(lifeExp))
gapminder %>%
filter(year == 2007) %>%
summarize(meanLifeExp = mean(lifeExp),
totalPop = sum(pop))
gapminder %>%
filter(year == 2007) %>%
summarize(meanLifeExp = mean(lifeExp),
totalPop = sum(pop))
gapminder %>%
group_by(year) %>%
summarize(m)
gapminder %>%
group_by(year) %>%
summarize(meanLifeExp = mean(lifeExp),
totalPop = sum(pop)
)
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(meanLifeExp = mean(lifeExp),
totalPop = sum(pop))
gapminder %>%
group_by(year, continent) %>%
summarize(totalPop = sum(pop),
meanLifeExp = mean(lifeExp)
)
by_year <- gapminder %>%
group_by(year) %>%
summarize(totalPop = sum(pop),
meanLifeExp = mean(lifeExp)
)
by_year
ggplot(by_year, aes(x = year,
y = totalPop)
) +
geom_point()
ggplot(by_year, aes(x = year,
y = totalPop)
) +
geom_point() +
expand_limits(y = 0)
ggplot(by_year, aes(x = year,
y = totalPop)
) +
geom_point() +
expand_limits(y = 0)
by_year_continent <- gapminder %>%
group_by(year, continent) %>%
summarize(totalPop = sum(pop),
meanLifeExp = mean(lifeExp))
by_year_continent
ggplot(by_year_continent, aes(x = year,
y = totalPop,
color = continent)
) + geom_point() +
expand_limits(y = 0)
ggplot(year_continent, aes(x = year,
y = meanLifeExp,
color = continent)) +
geom_line() +
expand_limits(y = 0)
ggplot(by_year_continent, aes(x = year,
y = meanLifeExp,
color = continent)) +
geom_line() +
expand_limits(y = 0)
by_continent <- gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(meanLifeExp = mean(lifeExp))
by_continent
ggplot(by_continent, aes(x = continent,
y = meanLifeExp)) +
geom_col()
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram()
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 5)
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 5) +
scale_x_log10()
ggplot(gapminder_2007, aes(x = lifeExp)) +
scale_x_log10() +
geom_histogram(binwidth = 5)
ggplot(gapminder_2007, aes(x = lifeExp)) +
scale_x_log10() +
geom_histogram(binwidth = 5)
ggplot(gapminder_2007, aes(x = lifeExp)) +
geom_histogram(binwidth = 5)
ggplot(gapminder_2007, aes(x = continent,
y = lifeExp)) +
geom_boxplot()
