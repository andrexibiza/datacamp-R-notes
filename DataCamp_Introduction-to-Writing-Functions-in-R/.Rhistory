coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
# Fix the coordinate ratio
coord_fixed()
ggplot(mtcars, aes(wt, mpg)) +
geom_point(size = 2) +
# Add Cartesian coordinates with zero expansion
coord_cartesian(expand = 0) +
theme_classic()
ggplot(mtcars, aes(wt, mpg)) +
geom_point(size = 2) +
# Turn clipping off
coord_cartesian(expand = 0, clip = "off") +
theme_classic() +
# Remove axis lines
theme(axis.line = element_blank())
ggplot(msleep, aes(x = bodywt, y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(0, 7000),
breaks = seq(0, 7000, 1000))
ggplot(msleep, aes(log10(bodywt), y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(-3, 4),
breaks = seq(-3, 4),
)
ggplot(msleep, aes(log10(bodywt), y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(-3, 4),
breaks = -3:4) +
annotation_logticks(sides = "b") # highlights log transformation
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
scale_x_log10(limits = c(1e-03, 1e+04))
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
coord_trans(x = "log10")
# Produce a scatter plot of brainwt vs. bodywt
ggplot(msleep, aes(x = bodywt, y = brainwt)) +
geom_point() +
ggtitle("Raw Values")
# Add scale_*_*() functions
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
ggtitle("Scale_ functions")
# Perform a log10 coordinate system transformation
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
coord_trans(x = "log10", y = "log10")
# Plot with a scale_*_*() function:
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 x scale
scale_x_log10() +
# Add a log10 y scale
scale_y_log10() +
ggtitle("Scale functions")
# Plot with transformed coordinates
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 coordinate transformation for x and y axes
coord_trans(x = "log10", y = "log10")
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE)
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
coord_flip()
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am
facet_grid(rows = vars(am))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am and columns by cyl
facet_grid(rows = vars(am), cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# The default is label_value
facet_grid(cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Displaying both the values and the variables
facet_grid(cols = vars(cyl), labeller = label_both)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Label context
facet_grid(cols = vars(cyl), labeller = label_context)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Two variables
facet_grid(cols = vars(vs, cyl), labeller = label_context)
# Make factor, set proper labels explictly
mtcars$fam <- factor(mtcars$am, labels = c(`0` = "automatic",
`1` = "manual"))
# Default order is alphabetical
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
# Make factor, set proper labels explictly, and
# manually set the label order
mtcars$fam <- factor(mtcars$am,
levels = c(1, 0),
labels = c("manual", "automatic"))
# View again
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Update the faceting to free the x-axis scales
facet_grid(cols = vars(cyl), scales = "free_x")
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Swap cols for rows; free the y-axis scales
facet_grid(rows = vars(cyl), scales = "free_y")
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Facet rows by gear
#   facet_grid(rows = vars(gear))
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Free the y scales and space
#   facet_grid(rows = vars(gear), scales = "free_y", space = "free_y")
library(carData)
data("Vocab")
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using vars()
facet_wrap(vars(year))
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using a formula
facet_wrap(~ year)
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Update the facet layout, using 11 columns
facet_wrap(~ year, ncol = 11)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Facet rows by fvs and cols by fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear))
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to add margins
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = TRUE)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = "fam")
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on gear and fvs
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = c("gear", "fvs"))
data(msleep)
sleep <- msleep[, c("vore", "sleep_total", "sleep_rem")] %>%
rename(total = sleep_total, rem = sleep_rem)
str(sleep)
d <- ggplot(sleep, aes(vore, total))
# ...
d +
stat_summary(fun = mean,
geom = "bar",
fill = "grey50") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
# position
posn_j <- position_jitter(width = 0.2)
# plot
d +
geom_point(alpha = 0.6,
position = posn_j)
d +
geom_point() +
stat_summary(fun = mean,
geom = "point",
fill = "red") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2,
color = "red")
d +
geom_point() +
stat_summary(fun.data = mean_sdl,
mult = 1,
width = 0.2,
color = "red")
d +
stat_summary(fun = mean,
geom = "point") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
library(lattice)
head(barley, 9)
ggplot(barley, aes(year, variety,
fill = yield)) +
geom_tile() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(yield, variety,
color = year)) +
geom_point() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(year, yield,
group = variety,
color = variety)) +
geom_line() +
facet_wrap(vars(site), nrow = 1)
install.packages("learnr")
setwd("//wdmycloudex4100/Axl-Ibiza/Andrex_Ibiza/DataCamp/R/DataCamp_Introduction-to-Writing-Functions-in-R")
coin_sides <- c("head", "tail")
# Sample from coin_sides once
sample(coin_sides, 1)
# Your script, from a previous step
coin_sides <- c("head", "tail")
sample(coin_sides, 1)
# Paste your script into the function body
toss_coin <- function() {
coin_sides <- c("head", "tail")
sample(coin_sides, 1)
}
toss_coin()
coin_sides <- c("head", "tail")
n_flips <- 10
# Sample from coin_sides n_flips times with replacement
sample(coin_sides, n_flips, replace = TRUE)
# Update the function to return n coin tosses
toss_coin <- function(n_flips) {
coin_sides <- c("head", "tail")
sample(coin_sides, n_flips, replace = TRUE)
}
# Generate 10 coin tosses
toss_coin(10)
coin_sides <- c("head", "tail")
n_flips <- 10
p_head <- 0.8
# Define a vector of weights
weights <- c(p_head, 1 - p_head)
# Update so that heads are sampled with prob p_head
sample(coin_sides, n_flips, replace = TRUE, prob = weights)
# Update the function so heads have probability p_head
toss_coin <- function(n_flips, p_head) {
coin_sides <- c("head", "tail")
# Define a vector of weights
weights <- c(p_head, 1 - p_head)
# Modify the sampling to be weighted
sample(coin_sides, n_flips, replace = TRUE, prob = weights)
}
# Generate 10 coin tosses
toss_coin(10, 0.8)
h <- head
data(cats, package = "MASS")
h(cats)
args(lm)
args(cor)
run_linear_regression <- function(data, formula) {
lm(formula, data)
}
cats %>%
run_linear_regression(Hwt ~ Bwt + Sex)
coin_sides <- c("head", "tail")
# Sample from coin_sides once
sample(coin_sides, 1)
# Your script, from a previous step
coin_sides <- c("head", "tail")
sample(coin_sides, 1)
# Paste your script into the function body
toss_coin <- function() {
coin_sides <- c("head", "tail")
sample(coin_sides, 1)
}
toss_coin()
coin_sides <- c("head", "tail")
n_flips <- 10
# Sample from coin_sides n_flips times with replacement
sample(coin_sides, n_flips, replace = TRUE)
# Update the function to return n coin tosses
toss_coin <- function(n_flips) {
coin_sides <- c("head", "tail")
sample(coin_sides, n_flips, replace = TRUE)
}
# Generate 10 coin tosses
toss_coin(10)
coin_sides <- c("head", "tail")
n_flips <- 10
p_head <- 0.8
# Define a vector of weights
weights <- c(p_head, 1 - p_head)
# Update so that heads are sampled with prob p_head
sample(coin_sides, n_flips, replace = TRUE, prob = weights)
# Update the function so heads have probability p_head
toss_coin <- function(n_flips, p_head) {
coin_sides <- c("head", "tail")
# Define a vector of weights
weights <- c(p_head, 1 - p_head)
# Modify the sampling to be weighted
sample(coin_sides, n_flips, replace = TRUE, prob = weights)
}
# Generate 10 coin tosses
toss_coin(10, 0.8)
h <- head
data(cats, package = "MASS")
h(cats)
args(lm)
args(cor)
run_linear_regression <- function(data, formula) {
lm(formula, data)
}
library(dplyr)
cats %>%
run_linear_regression(Hwt ~ Bwt + Sex)
snake_river_visits <- readRDS("data/snake_river_visits.rds")
# Run a generalized linear regression
glm(
# Model no. of visits vs. gender, income, travel
n_visits ~ gender + income + travel,
# Use the snake_river_visits dataset
data = snake_river_visits,
# Make it a Poisson regression
family = "poisson"
)
# Write a function to run a Poisson regression
run_poisson_regression <- function(data, formula) {
glm(formula, data, family = "poisson")
}
# From previous step
run_poisson_regression <- function(data, formula) {
glm(formula, data, family = poisson)
}
# Re-run the Poisson regression, using your function
model <- snake_river_visits %>%
run_poisson_regression(n_visits ~ gender + income + travel)
# # Run this to see the predictions
# snake_river_explanatory %>%
#   mutate(predicted_n_visits = predict(model, ., type = "response"))%>%
#   arrange(desc(predicted_n_visits))
toss_coin <- function(n_flips, p_head) {
coin_sides <- c("head", "tail")
weights <- c(p_head, 1 - p_head)
sample(coin_sides, n_flips, replace = TRUE, prob = weights)
}
toss_coin <- function(n_flips, p_head = 0.5) {
coin_sides <- c("head", "tail")
weights <- c(p_head, 1 - p_head)
sample(coin_sides, n_flips, replace = TRUE, prob = weights)
}
my_fun <- function(data_arg1, data_arg2, detail_arg1 = default1) {
# do something
}
args(median)
library(jsonlite)
args(fromJSON)
args(set.seed)
args(prop_test)
args(prop.test)
args(prop.test)
data(cats, package = "MASS")
quantile(cats$Hwt)
cut_by_quantile <- function(x, n, na.rm, labels, interval_type){
probs <- seq(0, 1, length.out = n + 1)
quantiles <- quantile(x, probs, na.rm = na.rm, names = FALSE)
right <- switch(interval_type, "(lo, hi]" = TRUE, "[lo, hi)" = FALSE)
cut(x, quantiles, labels = labels, right = right, include.lowest = TRUE)
}
cut(x, quantile(x))
setwd("//wdmycloudex4100/Axl-Ibiza/Andrex_Ibiza/DataCamp/R/DataCamp_Introduction-to-Writing-Functions-in-R")
calc_geometric_mean <- function(x, na.rm = FALSE) {
x %>%
log() %>%
mean(na.rm = na.rm) %>%
exp()
}
calc_geometric_mean(letters)
calc_geometric_mean(letters)
calc_geometric_mean <- function(x, na.rm = FALSE) {
if(!is.numeric(x)) {
stop("x is not of class 'numeric'; it has class '", class(x), "'.")
}
x %>%
log() %>%
mean(na.rm = na.rm) %>%
exp()
}
calc_geometric_mean(letters)
install.packages("assertive")
getRversion()
calc_geometric_mean <- function(x, na.rm = FALSE) {
assert_is_numeric(x)
if(any(is_non_positive(x), na.rm = TRUE)) {
stop("x contains non-positive values, so the geometric mean makes no sense")
}
x %>%
log() %>%
mean(na.rm = na.rm) %>%
exp()
}
calc_geometric_mean(c(1, -1))
std_and_poor500 <- readRDS("data/std_and_poor500_with_pe_2019-06-21.rds")
# Look at the Standard and Poor 500 data
glimpse(std_and_poor500)
# Write a function to calculate the reciprocal
get_reciprocal <- function(x) {
return (1/x)
}
# From previous step
get_reciprocal <- function(x) {
1 / x
}
# Write a function to calculate the harmonic mean
calc_harmonic_mean <- function(x) {
x %>%
log() %>%
mean() %>%
exp()
}
# From previous steps
get_reciprocal <- function(x) {
1 / x
}
calc_harmonic_mean <- function(x) {
x %>%
get_reciprocal() %>%
mean() %>%
get_reciprocal()
}
std_and_poor500 %>%
# Group by sector
group_by(sector) %>%
# Summarize, calculating harmonic mean of P/E ratio
summarize(hmean_pe_ratio = calc_harmonic_mean(pe_ratio))
# Add an na.rm arg with a default, and pass it to mean()
calc_harmonic_mean <- function(x, na.rm = FALSE) {
x %>%
get_reciprocal() %>%
mean(na.rm = na.rm) %>%
get_reciprocal()
}
# From previous step
calc_harmonic_mean <- function(x, na.rm = FALSE) {
x %>%
get_reciprocal() %>%
mean(na.rm = na.rm) %>%
get_reciprocal()
}
std_and_poor500 %>%
# Group by sector
group_by(sector) %>%
# Summarize, calculating harmonic mean of P/E ratio
summarize(hmean_pe_ratio = calc_harmonic_mean(pe_ratio, na.rm = TRUE))
# Swap na.rm arg for ... in signature and body
calc_harmonic_mean <- function(x, ...) {
x %>%
get_reciprocal() %>%
mean(...) %>%
get_reciprocal()
}
# Swap na.rm arg for ... in signature and body
calc_harmonic_mean <- function(x, ...) {
x %>%
get_reciprocal() %>%
mean(...) %>%
get_reciprocal()
}
calc_harmonic_mean <- function(x, ...) {
x %>%
get_reciprocal() %>%
mean(...) %>%
get_reciprocal()
}
std_and_poor500 %>%
# Group by sector
group_by(sector) %>%
# Summarize, calculating harmonic mean of P/E ratio
summarize(hmean_pe_ratio = calc_harmonic_mean(pe_ratio, na.rm = TRUE))
calc_harmonic_mean <- function(x, na.rm = FALSE) {
# Assert that x is numeric
assert_is_numeric(x)
x %>%
get_reciprocal() %>%
mean(na.rm = na.rm) %>%
get_reciprocal()
}
# See what happens when you pass it strings
calc_harmonic_mean(std_and_poor500$sector)
