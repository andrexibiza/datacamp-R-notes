setwd("//wdmycloudex4100/Axl-Ibiza/Andrex_Ibiza/DataCamp/R/DataCamp_Working-with-dates-and-times-in-R")
2003-02-27
# interpreted as mathematical function
"2003-02-27"
# interpreted as character string
str("2003-02-27")
# interpreted as character string
as.Date("2003-02-27")
str(as.Date("2003-02-27"))
# The date R 3.0.0 was released
x <- "2013-04-03"
# Examine structure of x
str(x)
# Use as.Date() to interpret x as a date
x_date <- as.Date(x)
# Examine structure of x_date
str(x_date)
# Store April 10 2014 as a Date
april_10_2014 <- as.Date("2014-04-10")
# Load the readr package
library(readr)
# Use read_csv() to import rversions.csv
releases <- read_csv("rversions.csv")
# Examine the structure of the date column
str(releases$date)
# Load the anytime package
library(anytime)
install.packages("anytime")
2003-02-27
# interpreted as mathematical function
"2003-02-27"
# interpreted as character string
str("2003-02-27")
# interpreted as character string
as.Date("2003-02-27")
str(as.Date("2003-02-27"))
# The date R 3.0.0 was released
x <- "2013-04-03"
# Examine structure of x
str(x)
# Use as.Date() to interpret x as a date
x_date <- as.Date(x)
# Examine structure of x_date
str(x_date)
# Store April 10 2014 as a Date
april_10_2014 <- as.Date("2014-04-10")
# Load the readr package
library(readr)
# Use read_csv() to import rversions.csv
releases <- read_csv("rversions.csv")
# Examine the structure of the date column
str(releases$date)
# Load the anytime package
library(anytime)
# Various ways of writing Sep 10 2009
sep_10_2009 <- c("September 10 2009", "2009-09-10", "10 Sep 2009", "09-10-2009")
# Use anytime() to parse sep_10_2009
anytime(sep_10_2009)
# Load the readr package
library(readr)
# Use read_csv() to import rversions.csv
releases <- read_csv("rversions.csv")
# Examine the structure of the date column
str(releases$date)
# Load the anytime package
library(anytime)
# Various ways of writing Sep 10 2009
sep_10_2009 <- c("September 10 2009", "2009-09-10", "10 Sep 2009", "09-10-2009")
# Use anytime() to parse sep_10_2009
anytime(sep_10_2009)
as.Date("2003-02-27") > as.Date("2002-02-27")
as.Date("2003-02-27" + 1)
as.Date("2003-02-27") + 1
as.Date("2003-02-27") - as.Date("2002-02-27")
x <- c(as.Date("2003-02-27"),
as.Date("2003-03-27"),
as.Date("2003-04-27"))
plot(x, 1:3)
library(ggplot2)
ggplot() +
geom_point(aes(x = x, y = 1:3))
# previously imported from csv
releases
# library(ggplot2)
# Set the x axis to the date column
ggplot(releases, aes(x = date, y = type)) +
geom_line(aes(group = 1, color = factor(major)))
# Limit the axis to between 2010-01-01 and 2014-01-01
ggplot(releases, aes(x = date, y = type)) +
geom_line(aes(group = 1, color = factor(major))) +
xlim(as.Date("2010-01-01"), as.Date("2014-01-01"))
# Specify breaks every ten years and labels with "%Y"
ggplot(releases, aes(x = date, y = type)) +
geom_line(aes(group = 1, color = factor(major))) +
scale_x_date(date_breaks = "10 years", date_labels = "%Y")
source("//wdmycloudex4100/Axl-Ibiza/Andrex_Ibiza/DataCamp/R/DataCamp_Working-with-dates-and-times-in-R/DataCamp_Working-with-dates-and-times-in-R.Rmd")
# Find the largest date
last_release_date <- max(releases$date)
# Filter row for last release
last_release <- filter(releases, date == last_release_date)
# Find the largest date
last_release_date <- max(releases$date)
# Filter row for last release
last_release <- filter(releases, date = last_release_date)
# Find the largest date
last_release_date <- max(releases$date)
# Filter row for last release
last_release <- filter(releases, date == last_release_date)
x <- as.POSIXct("1970-01-01 00:10:00")
str(x)
as.POSIXct("2013-02-27T18:00:00Z"))
as.POSIXct("2013-02-27T18:00:00Z")
as.POSIXct("2013-02-27T18:00:00Z", tz = "UTC")
Sys.timezone()
# Use as.POSIXct to enter the datetime
as.POSIXct("2010-10-01 12:12:00")
# Use as.POSIXct again but set the timezone to `"America/Los_Angeles"`
as.POSIXct("2010-10-01 12:12:00", tz = "America/Los_Angeles")
# Use read_csv to import rversions.csv
releases <- read_csv("rversions.csv")
# Examine structure of datetime column
str(releases$datetime)
# Import "cran-logs_2015-04-17.csv" with read_csv()
logs <- read_csv("cran-logs_2015-04-17.csv")
# Print logs
print(logs)
# Store the release time as a POSIXct object
release_time <- as.POSIXct("2015-04-16 07:13:33", tz = "UTC")
# When is the first download of 3.2.0?
logs %>%
filter(datetime > release_time,
r_version == "3.2.0")
library(dplyr)
# Store the release time as a POSIXct object
release_time <- as.POSIXct("2015-04-16 07:13:33", tz = "UTC")
# When is the first download of 3.2.0?
logs %>%
filter(datetime > release_time,
r_version == "3.2.0")
# Examine histograms of downloads by version
ggplot(logs, aes(x = datetime)) +
geom_histogram() +
geom_vline(aes(xintercept = as.numeric(release_time)))+
facet_wrap(~ r_version, ncol = 1)
ymd("2013-02-27")
library(lubridate)
ymd("2013-02-27")
dmy("27/2/13")
parse_date_time(c("Feb 27th, 2017", "27th Feb 2017"),
+ order = c("mdy", "dmy"))
parse_date_time(c("Feb 27th, 2017", "27th Feb 2017"),
order = c("mdy", "dmy"))
# Extract components
akl_daily <- read_csv("akl_weather_daily.csv")
akl_daily <- akl_daily %>%
mutate(
year = year(date),
yday = yday(date),
month = month(date, label = TRUE)
)
ymd("2013-02-27")
ymd("2013.02.27")
ymd("2013 Feb 27th")
dmy("27-02-2013")
mdy("02-27-2013")
dmy_hm("27-02-2013 12:12pm")
parse_date_time("27-02-2013", order = "dmy")
parse_date_time(c("27-02-2013", "2013 Feb 27th"), order = c("dmy", "ymd"))
make_date(year = 2013, month = 2, day = 27)
# Without the pipe: nested functions
summarise(group_by(filter(releases, major == 3), minor), n =  n())
# With pipe: more linear
releases %>%
filter(major == 3) %>%
group_by(minor) %>%
summarise(n = n())
x <- ymd("2013-02-23")
year(x)
month(x)
day(x)
release_time <- releases$datetime
head(release_time)
head(release_time %>% hour())
head(release_time) %>%
floor_date(unit = "hour")
