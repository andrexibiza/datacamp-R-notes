p + geom_point() + ggtitle("Low precision (& integer) data")
p + geom_jitter(alpha = 0.5,
width = 0.1,
height = 0.1) +
ggtitle("Jittering may give a wrong impression")
p + geom_count() + ggtitle("geom_count()")
ggplot(iris, aes(x = Species,
y = Sepal.Length)) +
geom_jitter(width = 0.2)
set.seed(123)
xx <- rnorm(100)
mean(xx)
mean(xx) + (sd(xx) * c(-1, 1))
# Hmisc
library(Hmisc)
smean.sdl(xx, mult = 1)
# ggplot2
mean_sdl(xx, mult = 1)
ggplot(iris, aes(x = Species,
y = Sepal.Length)) +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1))
ggplot(iris, aes(x = Species,
y = Sepal.Length)) +
stat_summary(fun = mean,
geom = "point") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult =1),
geom = "errorbar",
width = 0.1)
ERR <- qt(0.975, length(xx) - 1) * sd(xx) / sqrt(length(xx))
mean(xx)
# [1] 0.09040591
mean(xx) + (ERR * c(-1, 1)) # 95% CI
# [1] -0.09071657  0.27152838
mean_cl_normal(xx)
library(MASS)
mam.new <- data.frame(body = log10(mammals$body))
ggplot(mam.new, aes(x = body)) +
geom_histogram(aes(y = ..density..)) +
geom_rug() +
stat_function(fun = dnorm, color = "red", args = list(mean = mean(mam.new$body),
sd = sd(mam.new$body)))
ggplot(mam.new, aes(sample = body)) +
stat_qq() +
geom_qq_line(col = "red")
# Define position objects
# 1. Jitter with width 0.2
posn_j <- position_jitter(width = 0.2)
# 2. Dodge with width 0.1
posn_d <- position_dodge(width = 0.1)
# 3. Jitter-dodge with jitter.width 0.2 and dodge.width 0.1
posn_jd <- position_jitterdodge(jitter.width = 0.2, dodge.width = 0.1)
# From previous step
posn_j <- position_jitter(width = 0.2)
posn_d <- position_dodge(width = 0.1)
posn_jd <- position_jitterdodge(jitter.width = 0.2, dodge.width = 0.1)
# Create the plot base: wt vs. fcyl, colored by fam
p_wt_vs_fcyl_by_fam <- ggplot(mtcars, aes(x = cyl, y = wt, color = am))
# Add a point layer
p_wt_vs_fcyl_by_fam +
geom_point()
# Add jittering only
p_wt_vs_fcyl_by_fam_jit <- p_wt_vs_fcyl_by_fam +
geom_point(position = posn_j)
p_wt_vs_fcyl_by_fam_jit
# Add dodging only
p_wt_vs_fcyl_by_fam +
geom_point(position = posn_d)
# Add jittering and dodging
p_wt_vs_fcyl_by_fam +
geom_point(position = posn_jd)
p_wt_vs_fcyl_by_fam_jit +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), position = posn_d)
p_wt_vs_fcyl_by_fam_jit +
# Change the geom to be an errorbar
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), position = posn_d, geom = "errorbar")
p_wt_vs_fcyl_by_fam_jit +
# Add a summary stat of normal confidence limits
stat_summary(fun.data = mean_cl_normal,
fun.args = list(mult = 1),
geom = "errorbar",
position = posn_d)
iris.smooth <- ggplot(
iris,
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)
) +
geom_point(alpha = 0.7) +
geom_smooth()
iris.smooth
iris.smooth +
scale_x_continuous(limits = c(4.5, 5.5))
iris.smooth +
xlim(c(4.5, 5.5))
iris.smooth +
coord_cartesian(xlim = c(4.5, 5.5))
library(zoo)
sunspots.m <- data.frame(
year = index(sunspot.month),
value = reshape2::melt(sunspot.month)$value)
ggplot(sunspots.m, aes(
x = year,
y = value
)) +
geom_line() +
coord_fixed() # default to 1:1 aspect ratio
ggplot(sunspots.m, aes(x = year, y = value)) +
geom_line() +
coord_fixed(ratio = 0.055)
# # Run the code, view the plot, then update it
# ggplot(mtcars, aes(x = wt, y = hp, color = fam)) +
#   geom_point() +
#   geom_smooth() +
#   # Add a continuous x scale from 3 to 6
#   scale_x_continuous(limits = c(3, 6))
ggplot(mtcars, aes(x = wt, y = hp, color = am)) +
geom_point() +
geom_smooth() +
# Add Cartesian coordinates with x limits from 3 to 6
coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
# Fix the coordinate ratio
coord_fixed()
ggplot(mtcars, aes(wt, mpg)) +
geom_point(size = 2) +
# Add Cartesian coordinates with zero expansion
coord_cartesian(expand = 0) +
theme_classic()
ggplot(mtcars, aes(wt, mpg)) +
geom_point(size = 2) +
# Turn clipping off
coord_cartesian(expand = 0, clip = "off") +
theme_classic() +
# Remove axis lines
theme(axis.line = element_blank())
ggplot(msleep, aes(x = bodywt, y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(0, 7000),
breaks = seq(0, 7000, 1000))
ggplot(msleep, aes(log10(bodywt), y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(-3, 4),
breaks = seq(-3, 4),
)
ggplot(msleep, aes(log10(bodywt), y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(-3, 4),
breaks = -3:4) +
annotation_logticks(sides = "b") # highlights log transformation
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
scale_x_log10(limits = c(1e-03, 1e+04))
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
coord_trans(x = "log10")
# Produce a scatter plot of brainwt vs. bodywt
ggplot(msleep, aes(x = bodywt, y = brainwt)) +
geom_point() +
ggtitle("Raw Values")
# Add scale_*_*() functions
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
ggtitle("Scale_ functions")
# Perform a log10 coordinate system transformation
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
coord_trans(x = "log10", y = "log10")
# Plot with a scale_*_*() function:
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 x scale
scale_x_log10() +
# Add a log10 y scale
scale_y_log10() +
ggtitle("Scale functions")
# Plot with transformed coordinates
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 coordinate transformation for x and y axes
coord_trans(x = "log10", y = "log10")
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE)
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
coord_flip()
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am
facet_grid(rows = vars(am))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am and columns by cyl
facet_grid(rows = vars(am), cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# The default is label_value
facet_grid(cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Displaying both the values and the variables
facet_grid(cols = vars(cyl), labeller = label_both)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Label context
facet_grid(cols = vars(cyl), labeller = label_context)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Two variables
facet_grid(cols = vars(vs, cyl), labeller = label_context)
# Make factor, set proper labels explictly
mtcars$fam <- factor(mtcars$am, labels = c(`0` = "automatic",
`1` = "manual"))
# Default order is alphabetical
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
# Make factor, set proper labels explictly, and
# manually set the label order
mtcars$fam <- factor(mtcars$am,
levels = c(1, 0),
labels = c("manual", "automatic"))
# View again
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Update the faceting to free the x-axis scales
facet_grid(cols = vars(cyl), scales = "free_x")
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Swap cols for rows; free the y-axis scales
facet_grid(rows = vars(cyl), scales = "free_y")
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Facet rows by gear
#   facet_grid(rows = vars(gear))
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Free the y scales and space
#   facet_grid(rows = vars(gear), scales = "free_y", space = "free_y")
library(carData)
data("Vocab")
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using vars()
facet_wrap(vars(year))
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using a formula
facet_wrap(~ year)
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Update the facet layout, using 11 columns
facet_wrap(~ year, ncol = 11)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Facet rows by fvs and cols by fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear))
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to add margins
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = TRUE)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = "fam")
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on gear and fvs
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = c("gear", "fvs"))
data(msleep)
sleep <- msleep[, c("vore", "sleep_total", "sleep_rem")] %>%
rename(total = sleep_total, rem = sleep_rem)
str(sleep)
d <- ggplot(sleep, aes(vore, total))
# ...
d +
stat_summary(fun = mean,
geom = "bar",
fill = "grey50") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
# position
posn_j <- position_jitter(width = 0.2)
# plot
d +
geom_point(alpha = 0.6,
position = posn_j)
d +
geom_point() +
stat_summary(fun = mean,
geom = "point",
fill = "red") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2,
color = "red")
d +
geom_point() +
stat_summary(fun.data = mean_sdl,
mult = 1,
width = 0.2,
color = "red")
d +
stat_summary(fun = mean,
geom = "point") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
library(lattice)
head(barley, 9)
ggplot(barley, aes(year, variety,
fill = yield)) +
geom_tile() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(yield, variety,
color = year)) +
geom_point() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(year, yield,
group = variety,
color = variety)) +
geom_line() +
facet_wrap(vars(site), nrow = 1)
library(dplyr)
mtcars %>%
count(cyl)
ggplot(mtcars, aes(x=as.factor(cyl), y=mpg)) +
geom_boxplot(fill="slateblue",
alpha = 0.2) +
xlab("cyl")
library(ggplot2)
ggplot(mtcars, aes(x=as.factor(cyl), y=mpg)) +
geom_boxplot(fill="slateblue",
alpha = 0.2) +
xlab("cyl")
install.packages("pwr")
library(pwr)
pwr.anova.test(k = 3,
n = 20,
f = 0.2,
sig.level = 0.05,
power = NULL)
data(ToothGrowth)
head(ToothGrowth, 6)
library(dplyr)
# Find mean len, median len, and standard deviation len with summarize()
ToothGrowth %>% summarize(mean(len),
median(len),
sd(len))
# Perform a two-sided t-test
t.test(x = ToothGrowth$len,
alternative = "two.sided",
mu = 18)
# Perform a t-test
ToothGrowth_ttest <- t.test(len ~ supp, data = ToothGrowth)
# Load broom
library(broom)
# Tidy ToothGrowth_ttest
tidy(ToothGrowth_ttest)
# Load dplyr
library(dplyr)
# Count number of observations for each combination of supp and dose
ToothGrowth %>%
count(supp, dose)
# Create a boxplot with geom_boxplot()
ggplot(ToothGrowth, aes(x = dose, y = len)) +
geom_boxplot()
# Create ToothGrowth_aov
ToothGrowth_aov <- aov(len ~ dose + supp, data = ToothGrowth)
# Examine ToothGrowth_aov with summary()
summary(ToothGrowth_aov)
# Less than
t.test(x = ToothGrowth$len,
alternative = "less",
mu = 18)
# Greater than
t.test(x = ToothGrowth$len,
alternative = "greater",
mu = 18)
# Load the pwr package
library(pwr)
# Calculate power
pwr.t.test(n = 100,
d = 0.35,
sig.level = 0.10,
type = "two.sample",
alternative = "two.sided",
power = NULL)
# Calculate sample size
pwr.t.test(n = NULL,
d = 0.25,
sig.level = 0.05,
type = "one.sample", alternative = "greater",
power = 0.8)
setwd("C:/Git/datacamp-R-notes/Introduction-to-Experimental-Design")
library(dplyr)
library(readr)
lendingclub <- read_csv("data/lendclub.csv")
glimpse(lendingclub)
library(dplyr)
library(readr)
lendingclub <- read_csv("data/lendclub.csv")
glimpse(lendingclub)
# Examine the variables with glimpse()
glimpse(lendingclub)
# Find median loan_amnt and mean int_rate, annual_inc
lendingclub %>% summarize(median(loan_amnt),
mean(int_rate),
mean(annual_inc))
# Use ggplot2 to build a bar chart of purpose
ggplot(data=lendingclub, aes(x = purpose)) +
geom_bar() +
coord_flip()
# Use recode() to create the new purpose_recode variable
lendingclub$purpose_recode <- lendingclub$purpose %>% recode(
"credit_card" = "debt_related",
"debt_consolidation" = "debt_related",
"medical" = "debt_related",
"car" = "big_purchase",
"major_purchase" = "big_purchase",
"vacation" = "big_purchase",
"moving" = "life_change",
"small_business" = "life_change",
"wedding" = "life_change",
"house" = "home_related",
"home_improvement" = "home_related")
# Use aov() to build purpose_aov
purpose_aov <- aov(funded_amnt ~ purpose_recode, data = lendingclub)
# Conduct Tukey's HSD test to create tukey_output
tukey_output <- TukeyHSD(purpose_aov, "purpose_recode", conf.level = 0.95)
# Tidy tukey_output to make sense of the results
tidy(tukey_output)
# Use aov() to build purpose_emp_aov
purpose_emp_aov <- aov(funded_amnt ~ purpose_recode + emp_length, data = lendingclub)
# Print purpose_emp_aov to the console
purpose_emp_aov
# Call summary() to see the p-values
summary(purpose_emp_aov)
lendingclub %>% summarize(median(loan_amnt),
mean(int_rate),
mean(annual_inc))
lendingclub %>%  group_by(verification_status) %>%
summarize(mean(funded_amnt),
var(funded_amnt))
ggplot(data = lendingclub,
aes(x = verification_status, y = funded_amnt)) +
geom_boxplot()
# Examine the summary of int_rate
summary(lendingclub$int_rate)
# Examine int_rate by grade
lendingclub %>%
group_by(grade) %>%
summarize(mean = mean(int_rate), var = var(int_rate), median = median(int_rate))
# Make a boxplot of int_rate by grade
ggplot(lendingclub, aes(x = grade, y = int_rate)) +
geom_boxplot()
# Use aov() to create grade_aov and call summary() to print results
grade_aov <- aov(int_rate ~ grade, data = lendingclub)
summary(grade_aov)
# For a 2x2 grid of plots:
par(mfrow=c(2, 2))
# Plot grade_aov
plot(grade_aov)
# Bartlett's test for homogeneity of variance
bartlett.test(int_rate ~ grade, data = lendingclub)
# Conduct the Kruskal-Wallis rank sum test
kruskal.test(int_rate ~ grade,
data = lendingclub)
# Load the pwr package
library(pwr)
# Use the correct function from pwr to find the sample size
pwr.t.test(n = NULL,
d = 0.2,
sig.level = 0.05,
type = "two.sample",
power = 0.8)
# Build lendingclub_multi
lendingclub_multi <-lm(loan_amnt ~ Group + grade + verification_status, data = lendingclub_ab)
