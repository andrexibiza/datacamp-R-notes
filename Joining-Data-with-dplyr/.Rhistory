group_by(color_id) %>%
summarize(total_quantity = sum(quantity))
# Aggregate Star Destroyer for the total quantity in each part
star_destroyer_colors <- star_destroyer %>%
group_by(color_id) %>%
summarize(total_quantity = sum(quantity))
# Left join the Millennium Falcon colors to the Star Destroyer colors
millennium_falcon_colors %>%
left_join(star_destroyer_colors, by = "color_id", suffix = c("_falcon", "_star_destroyer"))
inventory_version_1 <- inventories %>%
filter(version == 1)
# Join versions to sets
sets %>%
left_join(inventory_version_1, by = "set_num") %>%
# Filter for where version is na
filter(is.na(version))
batmobile %>%
left_join(batwing,
by =c("part_num","color_id"),
suffix =c("_batmobile","_batwing")
)
batmobile %>%
right_join(batwing,
by = c("part_num","color_id"),
suffix = c("_batmobile","_batwing")
)
sets %>%
count(theme_id, sort = TRUE)
sets %>%
count(theme_id, sort =TRUE)%>%  inner_join(themes, by =c("theme_id"="id"))
sets %>%
count(theme_id, sort = TRUE) %>%
right_join(themes, by =c("theme_id" = "id"))
library(tidyr)
sets %>%
count(theme_id, sort = TRUE) %>%
right_join(themes,
by =c("theme_id" = "id")) %>%
replace_na(list(n =0))
parts %>%
# Count the part_cat_id
count(part_cat_id) %>%
# Right join part_categories
right_join(part_categories, by = c("part_cat_id" = "id"))
parts %>%
count(part_cat_id) %>%
right_join(part_categories, by = c("part_cat_id" = "id")) %>%
# Filter for NA
filter(is.na(n))
parts %>%
count(part_cat_id) %>%
right_join(part_categories, by = c("part_cat_id" = "id")) %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n=0))
themes
themes %>%
inner_join(themes,
by = c("parent_id" = "id")
)
themes %>%
inner_join(themes,
by = c("parent_id" = "id"),
suffix = c("_child", "_parent")
)
themes %>%
inner_join(themes,
by = c("parent_id" = "id"),
suffix = c("_child", "_parent")) %>%
filter(name_child == "The Lord of the Rings")
themes %>%
inner_join(themes,
by = c("parent_id" = "id"),
suffix = c("_child", "_parent")) %>%
filter(name_parent == "The Lord of the Rings")
themes %>%
# Inner join the themes table
inner_join(themes, by=c("id" = "parent_id"), suffix = c("_parent", "_child")) %>%
# Filter for the "Harry Potter" parent name
filter(name_parent == "Harry Potter")
# Join themes to itself again to find the grandchild relationships
themes %>%
inner_join(themes,
by = c("id" = "parent_id"),
suffix = c("_parent", "_child")) %>%
inner_join(themes,
by = c("id_child" = "parent_id"),
suffix = c("_parent", "_grandchild")
)
themes %>%
# Left join the themes table to its own children
left_join(themes,
by = c("id" = "parent_id"),
suffix=c("_parent", "_child")
) %>%
# Filter for themes that have no child themes
filter(is.na(name_child))
batwing %>%
left_join(batwing,
by =c("part_num", "color_id"),
suffix = c("_batmobile", "_batwing")
)
inventory_parts_joined <- inventories %>%
inner_join(inventory_parts, by = c("id" = "inventory_id")) %>%
arrange(desc(quantity)) %>%
select(-id,-version)
batmobile <- inventory_parts_joined %>%
filter(set_num =="7784-1") %>%
select(-set_num)
batwing <- inventory_parts_joined %>%
filter(set_num =="70916-1") %>%
select(-set_num)
batmobile
batwing
batmobile %>%
left_join(batwing,
by =c("part_num", "color_id"),
suffix = c("_batmobile", "_batwing")
)
batmobile %>%
right_join(batwing,
by = c("part_num", "color_id"),
suffix = c("_batmobile","_batwing")
)
batmobile %>%
full_join(batwing,
by = c("part_num", "color_id"),
suffix = c("_batmobile","_batwing")
)
batmobile %>%
full_join(batwing,
by = c("part_num", "color_id"),
suffix = c("_batmobile","_batwing")
)
library(tidyr)
batmobile %>%
full_join(batwing,
by = c("part_num", "color_id"),
suffix = c("_batmobile", "_batwing")
) %>%
replace_na(list(quantity_batmobile = 0,
quantity_batwing = 0)
)
inventory_parts_joined <- inventories %>%
inner_join(inventory_parts, by = c("id" = "inventory_id")) %>%
arrange(desc(quantity)) %>%
select(-id, -version)
# Start with inventory_parts_joined table
inventory_parts_joined %>%
# Combine with the sets table
inner_join(sets, by="set_num") %>%
# Combine with the themes table
inner_join(themes, by=c("theme_id" = "id"), suffix=c("_set", "_theme"))
# Start with inventory_parts_joined table
inventory_parts_joined %>%
# Combine with the sets table
inner_join(sets, by="set_num") %>%
# Combine with the themes table
inner_join(themes, by=c("theme_id" = "id"), suffix=c("_set", "_theme"))
inventory_sets_themes <- inventory_parts_joined %>%
inner_join(sets, by = "set_num") %>%
inner_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme"))
batman <- inventory_sets_themes %>%
filter(name_theme == "Batman")
star_wars <- inventory_sets_themes %>%
filter(name_theme == "Star Wars")
# Count the part number and color id, weight by quantity
batman %>%
count(part_num, color_id, wt=quantity)
star_wars %>%
count(part_num, color_id, wt=quantity)
batman_parts <- batman %>%
count(part_num, color_id, wt = quantity)
star_wars_parts <- star_wars %>%
count(part_num, color_id, wt = quantity)
batman_parts %>%
# Combine the star_wars_parts table
full_join(star_wars_parts,
by = c("part_num",
"color_id"),
suffix = c("_batman",
"_star_wars")
) %>%
# Replace NAs with 0s in the n_batman and n_star_wars columns
replace_na(list(n_batman = 0,
n_star_wars = 0)
)
parts_joined <- batman_parts %>%
full_join(star_wars_parts,
by = c("part_num",
"color_id"),
suffix = c("_batman",
"_star_wars")
) %>%
replace_na(list(n_batman = 0,
n_star_wars = 0)
)
parts_joined %>%
# Sort the number of star wars pieces in descending order
arrange(desc(n_star_wars)) %>%
# Join the colors table to the parts_joined table
inner_join(colors, by=c("color_id" = "id")) %>%
# Join the parts table to the previous join
inner_join(parts, by="part_num", suffix=c("_color", "_part"))
batmobile %>%
left_join(batwing,
by = c("part_num", "color_id"),
suffix = c("_batmobile", "_batwing")
)
batmobile %>%
semi_join(batwing,
by = c("color_id", "part_num")
)
batmobile %>%
anti_join(batwing,
by = c("color_id", "part_num")
)
themes %>%
semi_join(sets,
by = c("id" = "theme_id")
)
themes %>%
anti_join(sets,
by = c("id" = "theme_id")
)
batmobile <- inventory_parts_joined %>%
filter(set_num == "7784-1") %>%
select(-set_num)
batwing <- inventory_parts_joined %>%
filter(set_num == "70916-1") %>%
select(-set_num)
# Filter the batwing set for parts that are also in the batmobile set
batwing %>%
semi_join(batmobile, by="part_num")
# Filter the batwing set for parts that aren't in the batmobile set
batwing %>%
anti_join(batmobile, by="part_num")
# Use inventory_parts to find colors included in at least one set
colors %>%
semi_join(inventory_parts, by=c("id" = "color_id"))
# Use filter() to extract version 1
version_1_inventories <- inventories %>%
filter(version == 1)
# Use anti_join() to find which set is missing a version 1
sets %>%
anti_join(version_1_inventories, by="set_num")
batmobile_colors <- batmobile %>%
group_by(color_id) %>%
summarize(total = sum(quantity))
batmobile_colors
batwing_colors <- batwing %>%
group_by(color_id) %>%
summarize(total = sum(quantity))
batwing_colors
batmobile_colors %>%
full_join(batwing_colors,
by = "color_id",
suffix = c("_batmobile", "_batwing")
) %>%
replace_na(list(total_batmobile = 0,
total_batwing = 0)
)
batmobile_colors %>%
full_join(batwing_colors,
by = "color_id",
suffix = c("_batmobile", "_batwing")) %>%
replace_na(list(total_batmobile = 0,
total_batwing = 0)
) %>%
inner_join(colors,
by = c("color_id" = "id")
)
batmobile_colors %>%
full_join(batwing_colors,
by = "color_id",
suffix = c("_batmobile", "_batwing")
) %>%
replace_na(list(total_batmobile = 0,
total_batwing = 0)
) %>%
inner_join(colors,
by = c("color_id" = "id")
) %>%
mutate(total_batmobile = total_batmobile / sum(total_batmobile),
total_batwing = total_batwing / sum(total_batwing))
colors_joined <- batmobile_colors %>%
full_join(batwing_colors,
by = "color_id",
suffix = c("_batmobile", "_batwing")
) %>%
replace_na(list(total_batmobile = 0,
total_batwing = 0)
) %>%
inner_join(colors,
by = c("color_id" = "id")
) %>%
mutate(total_batmobile = total_batmobile / sum(total_batmobile),
total_batwing = total_batwing / sum(total_batwing),
difference = total_batmobile - total_batwing
)
colors_joined
library(ggplot2)
library(forcats)
color_palette <- setNames(colors_joined$rgb, colors_joined$name)
colors_joined %>%
mutate(name = fct_reorder(name, difference)
) %>%
ggplot(aes(name,
difference,
fill = name)
) +
geom_col() +
coord_flip() +
scale_fill_manual(values = color_palette, guide = "none")
inventory_parts_themes <- inventories %>%
inner_join(inventory_parts, by = c("id" = "inventory_id")) %>%
arrange(desc(quantity)) %>%
select(-id, -version) %>%
inner_join(sets, by = "set_num") %>%
inner_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme"))
batman_colors <- inventory_parts_themes %>%
# Filter the inventory_parts_themes table for the Batman theme
filter(name_theme == "Batman") %>%
group_by(color_id) %>%
summarize(total = sum(quantity)) %>%
# Add a fraction column of the total divided by the sum of the total
mutate(fraction = total / sum(total))
# Filter and aggregate the Star Wars set data; add a fraction column
star_wars_colors <- inventory_parts_themes %>%
filter(name_theme == "Star Wars") %>%
group_by(color_id) %>%
summarize(total = sum(quantity)) %>%
mutate(fraction = total / sum(total))
batman_colors <- inventory_parts_themes %>%
filter(name_theme == "Batman") %>%
group_by(color_id) %>%
summarize(total = sum(quantity)) %>%
mutate(fraction = total / sum(total))
star_wars_colors <- inventory_parts_themes %>%
filter(name_theme == "Star Wars") %>%
group_by(color_id) %>%
summarize(total = sum(quantity)) %>%
mutate(fraction = total / sum(total))
batman_colors %>%
# Join the Batman and Star Wars colors
full_join(star_wars_colors, by = "color_id", suffix = c("_batman", "_star_wars")) %>%
# Replace NAs in the total_batman and total_star_wars columns
replace_na(list(total_batman = 0, total_star_wars = 0)) %>%
inner_join(colors, by = c("color_id" = "id"))
batman_colors %>%
full_join(star_wars_colors, by = "color_id", suffix = c("_batman", "_star_wars")) %>%
replace_na(list(total_batman = 0, total_star_wars = 0)) %>%
inner_join(colors, by = c("color_id" = "id")) %>%
# Create the difference and total columns
mutate(difference = fraction_batman - fraction_star_wars,
total = total_batman + total_star_wars) %>%
# Filter for totals greater than 200
filter(total >= 200)
library(dplyr)
library(forcats)
colors_joined <- batman_colors %>%
full_join(star_wars_colors,
by = "color_id",
suffix = c("_batman", "_star_wars")) %>%
replace_na(list(total_batman = 0, total_star_wars = 0)) %>%
inner_join(colors, by = c("color_id" = "id")) %>%
mutate(difference = (fraction_batman - fraction_star_wars),
total = (total_batman + total_star_wars)) %>%
filter(total >= 200) %>%
mutate(name = as_factor(name)) %>%   # Ensure name is a factor
mutate(name = fct_reorder(name, difference))   # Reorder factor levels based on the difference
# Create a bar plot using colors_joined and the name and difference columns
ggplot(colors_joined, aes(name, difference, fill = name)) +
geom_col() +
coord_flip() +
scale_fill_manual(values = color_palette, guide = "none") +
labs(y = "Difference: Batman - Star Wars")
questions <- readRDS("data/questions.rds")
questions
question_tags <- readRDS("data/question_tags.rds")
question_tags
tags <- readRDS("data/tags.rds")
tags
questions %>%
inner_join(question_tags, by = c("id" = "question_id"))
questions_with_tags <- questions %>%
inner_join(question_tags, by = c("id" = "question_id")) %>%
inner_join(tags, by = c("tag_id" = "id"))
questions_with_tags
questions_with_tags %>%
count(tag_name, sort = TRUE)
# Join the questions and question_tags tables
questions %>%
left_join(question_tags, by = c("id" = "question_id"))
# Join in the tags table
questions %>%
left_join(question_tags, by = c("id" = "question_id")) %>%
left_join(tags, by = c("tag_id" = "id"))
# Replace the NAs in the tag_name column
questions %>%
left_join(question_tags, by = c("id" = "question_id")) %>%
left_join(tags, by = c("tag_id" = "id")) %>%
replace_na(list(tag_name = "only-r"))
questions_with_tags %>%
# Group by tag_name
group_by(tag_name) %>%
# Get mean score and num_questions
summarize(score = mean(score),
num_questions = n()) %>%
# Sort num_questions in descending order
arrange(desc(num_questions))
# Using a join, filter for tags that are never on an R question
tags %>%
anti_join(question_tags, by = c("id" = "tag_id"))
answers <- readRDS("data/answers.rds")
answers
questions %>%
inner_join(answers, by = c("id" = "question_id"))
questions %>%
# Inner join questions and answers with proper suffixes
inner_join(answers,
by = c("id" = "question_id"),
suffix = c("_question", "_answer")
) %>%
# Subtract creation_date_question from creation_date_answer to create gap
mutate(gap = as.integer(creation_date_answer - creation_date_question))
# Count and sort the question id column in the answers table
answer_counts <- answers %>%
count(question_id, sort = TRUE)
# Combine the answer_counts and questions tables
questions %>%
left_join(answer_counts, by = c("id" = "question_id")) %>%
# Replace the NAs in the n column
replace_na(list(n = 0))
answer_counts <- answers %>%
count(question_id, sort = TRUE)
question_answer_counts <- questions %>%
left_join(answer_counts, by = c("id" = "question_id")) %>%
replace_na(list(n = 0))
question_answer_counts %>%
# Join the question_tags tables
inner_join(question_tags, by = c("id" = "question_id")) %>%
# Join the tags table
inner_join(tags, by = c("tag_id" = "id"))
tagged_answers <- question_answer_counts %>%
inner_join(question_tags, by = c("id" = "question_id")) %>%
inner_join(tags, by = c("tag_id" = "id"))
tagged_answers %>%
# Aggregate by tag_name
group_by(tag_name)  %>%
# Summarize questions and average_answers
summarize(questions = n(),
average_answers = mean(n)) %>%
# Sort the questions in descending order
arrange(desc(questions))
questions
answers
questions %>%
bind_rows(answers)
questions_type <- questions %>%
mutate(type = "question")
answers_type <- answers %>%
mutate(type = "answer")
posts <- bind_rows(questions_type, answers_type)
posts
posts %>%
group_by(type) %>%
summarize(average_score = mean(score))
library(lubridate)
posts %>%
mutate(year = year(creation_date))
posts %>%
mutate(year = year(creation_date)) %>%
count(year, type)
questions_answers_year <- posts %>%
mutate(year = year(creation_date)) %>%
count(year, type)
ggplot(questions_answers_year, aes(year, n, color = type)) +
geom_line()
# Inner join the question_tags and tags tables with the questions table
questions %>%
inner_join(question_tags, by = c("id" = "question_id")) %>%
inner_join(tags, by = c("tag_id" = "id"))
# Inner join the question_tags and tags tables with the answers table
answers %>%
inner_join(question_tags, by = "question_id") %>%
inner_join(tags, by = c("tag_id" = "id"))
questions_with_tags <- questions %>%
inner_join(question_tags, by = c("id" = "question_id")) %>%
inner_join(tags, by = c("tag_id" = "id"))
answers_with_tags <- answers %>%
inner_join(question_tags, by = "question_id") %>%
inner_join(tags, by = c("tag_id" = "id"))
# Combine the two tables into posts_with_tags
posts_with_tags <- bind_rows(questions_with_tags %>% mutate(type = "question"),
answers_with_tags %>% mutate(type = "answer"))
# Add a year column, then count by type, year, and tag_name
posts_with_tags %>%
mutate(year = year(creation_date)) %>%
count(type, year, tag_name)
# Filter for the dplyr and ggplot2 tag names
by_type_year_tag_filtered <- by_type_year_tag %>%
filter(tag_name == "dplyr" | tag_name == "ggplot2")
by_type_year_tag <- posts_with_tags %>%
mutate(year = year(creation_date)) %>%
count(type, year, tag_name)
# Filter for the dplyr and ggplot2 tag names
by_type_year_tag_filtered <- by_type_year_tag %>%
filter(tag_name == "dplyr" | tag_name == "ggplot2")
# Create a line plot faceted by the tag name
ggplot(by_type_year_tag_filtered, aes(year, n, color = type)) +
geom_line() +
facet_wrap(~ tag_name)
