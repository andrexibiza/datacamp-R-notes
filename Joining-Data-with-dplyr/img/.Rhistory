ggplot(barley, aes(year, yield,
group = variety,
color = variety)) +
geom_line() +
facet_wrap(vars(site), nrow = 1) +
theme_minimal()
library(lattice)
data(barley)
ggplot(barley, aes(year, yield,
group = variety,
color = variety)) +
geom_line() +
facet_wrap(vars(site), nrow = 1)
library(lattice)
head(barley, 9)
ggplot(barley, aes(year, variety,
fill = yield)) +
geom_tile() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(yield, variety,
color = year)) +
geom_point() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(x = year, y = yield,
group = site,
color = site)) +
stat_summary(fun = mean,
geom = "line") +
stat_summary(fun.data = mean_sdl,
geom = "errorbar")
source("//wdmycloudex4100/Axl-Ibiza/Andrex_Ibiza/Notes-and-Study-Guides/DataCamp_Intermediate-Data-Visualization-with-ggplot2/DataCamp_Notes_Intermediate-Data-Visualization-with-ggplot2.Rmd")
source("//wdmycloudex4100/Axl-Ibiza/Andrex_Ibiza/Notes-and-Study-Guides/DataCamp_Intermediate-Data-Visualization-with-ggplot2/DataCamp_Notes_Intermediate-Data-Visualization-with-ggplot2.Rmd")
library(tidyverse)
p <- ggplot(iris, aes(x = Sepal.Width))
p + geom_histogram()
p <- ggplot(iris, aes(x = Sepal.Width))
p + geom_histogram()
p + geom_bar()
p <- ggplot(mtcars, aes(x = factor(cyl),  fill = factor(am)))
p + geom_bar()
p + stat_count()
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
stat_smooth()
# geom_smooth() using method = 'loess' and formula 'y ~ x'
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
stat_smooth(se = FALSE)
# geom_smooth() using method = 'loess' and formula 'y ~ x'
# loess is a nonparametric smoothing algorithm used when there are less than 1000 observations. creates weighted mean that creates sliding window along x-axis and is valuable for exploratory data analysis.
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
stat_smooth(se = FALSE, span = 0.4)
# geom_smooth() using method = 'loess' and formula 'y ~ x'
# the `span` argument controls the degree of smoothing, which is the size of the sliding window.
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
fullrange = TRUE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
# Add 3 smooth LOESS stats, varying span & color
stat_smooth(color = "red", span = 0.9, se = FALSE) +
stat_smooth(color = "green", span = 0.6, se = FALSE) +
stat_smooth(color = "blue", span = 0.3, se = FALSE)
# Amend the plot to color by fcyl
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
# Add a smooth LOESS stat, no ribbon
stat_smooth(se = FALSE) +
# Add a smooth lin. reg. stat, no ribbon
stat_smooth(method = "lm", se = FALSE)
# Amend the plot
# ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
#   geom_point() +
#   # Map color to dummy variable "All"
#   stat_smooth(aes(color = "All"), se = FALSE) +
#   stat_smooth(method = "lm", se = FALSE)
# View the structure of mtcars
str(mtcars)
# Using mtcars, draw a scatter plot of mpg vs. wt
ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
# Amend the plot to add a smooth layer
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
# Amend the plot. Use lin. reg. smoothing; turn off std err ribbon
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Amend the plot. Swap geom_smooth() for stat_smooth().
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
# Using mtcars, plot mpg vs. wt, colored by fcyl
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
# Add a point layer
geom_point() +
# Add a smooth lin reg stat, no ribbon
stat_smooth(method = "lm", se = FALSE)
# Amend the plot to add another smooth layer with dummy grouping
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
stat_smooth(aes(group = 1), method = "lm", se = FALSE)
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p + geom_point() + ggtitle("Low precision (& integer) data")
p + geom_jitter(alpha = 0.5,
width = 0.1,
height = 0.1) +
ggtitle("Jittering may give a wrong impression")
p + geom_count() + ggtitle("geom_count()")
ggplot(iris, aes(x = Species,
y = Sepal.Length)) +
geom_jitter(width = 0.2)
set.seed(123)
xx <- rnorm(100)
mean(xx)
mean(xx) + (sd(xx) * c(-1, 1))
# Hmisc
library(Hmisc)
smean.sdl(xx, mult = 1)
# ggplot2
mean_sdl(xx, mult = 1)
ggplot(iris, aes(x = Species,
y = Sepal.Length)) +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1))
ggplot(iris, aes(x = Species,
y = Sepal.Length)) +
stat_summary(fun = mean,
geom = "point") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult =1),
geom = "errorbar",
width = 0.1)
ERR <- qt(0.975, length(xx) - 1) * sd(xx) / sqrt(length(xx))
mean(xx)
# [1] 0.09040591
mean(xx) + (ERR * c(-1, 1)) # 95% CI
# [1] -0.09071657  0.27152838
mean_cl_normal(xx)
library(MASS)
mam.new <- data.frame(body = log10(mammals$body))
ggplot(mam.new, aes(x = body)) +
geom_histogram(aes(y = ..density..)) +
geom_rug() +
stat_function(fun = dnorm, color = "red", args = list(mean = mean(mam.new$body),
sd = sd(mam.new$body)))
ggplot(mam.new, aes(sample = body)) +
stat_qq() +
geom_qq_line(col = "red")
# Define position objects
# 1. Jitter with width 0.2
posn_j <- position_jitter(width = 0.2)
# 2. Dodge with width 0.1
posn_d <- position_dodge(width = 0.1)
# 3. Jitter-dodge with jitter.width 0.2 and dodge.width 0.1
posn_jd <- position_jitterdodge(jitter.width = 0.2, dodge.width = 0.1)
# From previous step
posn_j <- position_jitter(width = 0.2)
posn_d <- position_dodge(width = 0.1)
posn_jd <- position_jitterdodge(jitter.width = 0.2, dodge.width = 0.1)
# Create the plot base: wt vs. fcyl, colored by fam
p_wt_vs_fcyl_by_fam <- ggplot(mtcars, aes(x = cyl, y = wt, color = am))
# Add a point layer
p_wt_vs_fcyl_by_fam +
geom_point()
# Add jittering only
p_wt_vs_fcyl_by_fam_jit <- p_wt_vs_fcyl_by_fam +
geom_point(position = posn_j)
p_wt_vs_fcyl_by_fam_jit
# Add dodging only
p_wt_vs_fcyl_by_fam +
geom_point(position = posn_d)
# Add jittering and dodging
p_wt_vs_fcyl_by_fam +
geom_point(position = posn_jd)
p_wt_vs_fcyl_by_fam_jit +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), position = posn_d)
p_wt_vs_fcyl_by_fam_jit +
# Change the geom to be an errorbar
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), position = posn_d, geom = "errorbar")
p_wt_vs_fcyl_by_fam_jit +
# Add a summary stat of normal confidence limits
stat_summary(fun.data = mean_cl_normal,
fun.args = list(mult = 1),
geom = "errorbar",
position = posn_d)
iris.smooth <- ggplot(
iris,
aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)
) +
geom_point(alpha = 0.7) +
geom_smooth()
iris.smooth
iris.smooth +
scale_x_continuous(limits = c(4.5, 5.5))
iris.smooth +
xlim(c(4.5, 5.5))
iris.smooth +
coord_cartesian(xlim = c(4.5, 5.5))
library(zoo)
sunspots.m <- data.frame(
year = index(sunspot.month),
value = reshape2::melt(sunspot.month)$value)
ggplot(sunspots.m, aes(
x = year,
y = value
)) +
geom_line() +
coord_fixed() # default to 1:1 aspect ratio
ggplot(sunspots.m, aes(x = year, y = value)) +
geom_line() +
coord_fixed(ratio = 0.055)
# # Run the code, view the plot, then update it
# ggplot(mtcars, aes(x = wt, y = hp, color = fam)) +
#   geom_point() +
#   geom_smooth() +
#   # Add a continuous x scale from 3 to 6
#   scale_x_continuous(limits = c(3, 6))
ggplot(mtcars, aes(x = wt, y = hp, color = am)) +
geom_point() +
geom_smooth() +
# Add Cartesian coordinates with x limits from 3 to 6
coord_cartesian(xlim = c(3,6))
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
# Fix the coordinate ratio
coord_fixed()
ggplot(mtcars, aes(wt, mpg)) +
geom_point(size = 2) +
# Add Cartesian coordinates with zero expansion
coord_cartesian(expand = 0) +
theme_classic()
ggplot(mtcars, aes(wt, mpg)) +
geom_point(size = 2) +
# Turn clipping off
coord_cartesian(expand = 0, clip = "off") +
theme_classic() +
# Remove axis lines
theme(axis.line = element_blank())
ggplot(msleep, aes(x = bodywt, y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(0, 7000),
breaks = seq(0, 7000, 1000))
ggplot(msleep, aes(log10(bodywt), y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(-3, 4),
breaks = seq(-3, 4),
)
ggplot(msleep, aes(log10(bodywt), y = 1)) +
geom_jitter() +
scale_x_continuous(limits = c(-3, 4),
breaks = -3:4) +
annotation_logticks(sides = "b") # highlights log transformation
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
scale_x_log10(limits = c(1e-03, 1e+04))
ggplot(msleep, aes(bodywt, y = 1)) +
geom_jitter() +
coord_trans(x = "log10")
# Produce a scatter plot of brainwt vs. bodywt
ggplot(msleep, aes(x = bodywt, y = brainwt)) +
geom_point() +
ggtitle("Raw Values")
# Add scale_*_*() functions
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
ggtitle("Scale_ functions")
# Perform a log10 coordinate system transformation
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
coord_trans(x = "log10", y = "log10")
# Plot with a scale_*_*() function:
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 x scale
scale_x_log10() +
# Add a log10 y scale
scale_y_log10() +
ggtitle("Scale functions")
# Plot with transformed coordinates
ggplot(msleep, aes(bodywt, brainwt)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
# Add a log10 coordinate transformation for x and y axes
coord_trans(x = "log10", y = "log10")
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE)
ggplot(iris, aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = "lm",
se = FALSE) +
coord_flip()
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am
facet_grid(rows = vars(am))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet rows by am and columns by cyl
facet_grid(rows = vars(am), cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# The default is label_value
facet_grid(cols = vars(cyl))
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Displaying both the values and the variables
facet_grid(cols = vars(cyl), labeller = label_both)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Label context
facet_grid(cols = vars(cyl), labeller = label_context)
# Plot wt by mpg
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Two variables
facet_grid(cols = vars(vs, cyl), labeller = label_context)
# Make factor, set proper labels explictly
mtcars$fam <- factor(mtcars$am, labels = c(`0` = "automatic",
`1` = "manual"))
# Default order is alphabetical
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
# Make factor, set proper labels explictly, and
# manually set the label order
mtcars$fam <- factor(mtcars$am,
levels = c(1, 0),
labels = c("manual", "automatic"))
# View again
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
facet_grid(cols = vars(fam))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Facet columns by cyl
facet_grid(cols = vars(cyl))
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Update the faceting to free the x-axis scales
facet_grid(cols = vars(cyl), scales = "free_x")
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
# Swap cols for rows; free the y-axis scales
facet_grid(rows = vars(cyl), scales = "free_y")
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Facet rows by gear
#   facet_grid(rows = vars(gear))
# ggplot(mtcars, aes(x = mpg, y = car, color = fam)) +
#   geom_point() +
#   # Free the y scales and space
#   facet_grid(rows = vars(gear), scales = "free_y", space = "free_y")
library(carData)
data("Vocab")
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using vars()
facet_wrap(vars(year))
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Create facets, wrapping by year, using a formula
facet_wrap(~ year)
ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "lm", se = FALSE) +
# Update the facet layout, using 11 columns
facet_wrap(~ year, ncol = 11)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Facet rows by fvs and cols by fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear))
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to add margins
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = TRUE)
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on fam
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = "fam")
# ggplot(mtcars, aes(x = wt, y = mpg)) +
#   geom_point() +
#   # Update the facets to only show margins on gear and fvs
#   facet_grid(rows = vars(fvs, fam), cols = vars(gear), margins = c("gear", "fvs"))
data(msleep)
sleep <- msleep[, c("vore", "sleep_total", "sleep_rem")] %>%
rename(total = sleep_total, rem = sleep_rem)
str(sleep)
d <- ggplot(sleep, aes(vore, total))
# ...
d +
stat_summary(fun = mean,
geom = "bar",
fill = "grey50") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
# position
posn_j <- position_jitter(width = 0.2)
# plot
d +
geom_point(alpha = 0.6,
position = posn_j)
d +
geom_point() +
stat_summary(fun = mean,
geom = "point",
fill = "red") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2,
color = "red")
d +
geom_point() +
stat_summary(fun.data = mean_sdl,
mult = 1,
width = 0.2,
color = "red")
d +
stat_summary(fun = mean,
geom = "point") +
stat_summary(fun.data = mean_sdl,
fun.args = list(mult = 1),
geom = "errorbar",
width = 0.2)
library(lattice)
head(barley, 9)
ggplot(barley, aes(year, variety,
fill = yield)) +
geom_tile() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(yield, variety,
color = year)) +
geom_point() +
facet_wrap(vars(site), ncol = 1)
ggplot(barley, aes(year, yield,
group = variety,
color = variety)) +
geom_line() +
facet_wrap(vars(site), nrow = 1)
setwd("C:/Git/Data-Portfolio/DataCamp/R/DataCamp_Joining-Data-with-dplyr/img")
setwd("C:/Git/Data-Portfolio/DataCamp/R/DataCamp_Joining-Data-with-dplyr)
sets <- readRDS("data/sets.rds")
sets <- readRDS("data/sets.rds")
sets
sets <- readRDS("data/sets.rds")
head(sets)
sets <- readRDS("data/sets.rds")
str(sets)
library(dplyr)
sets %>%
head(3)
themes <- readRDS("data/themes.rds")
themes %>%
head(3)
sets %>%
inner_join(themes, by = c("theme_id" = "id"))
sets %>%
inner_join(themes, by = c("theme_id" = "id")) %>%
head()
sets %>%
inner_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
head()
sets %>%
inner_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
count(name_theme, sort = TRUE)
sets %>%
inner_join(themes, by = c("theme_id" = "id"), suffix = c("_set", "_theme")) %>%
count(name_theme, sort = TRUE) %>%
head(10)
parts <- readRDS("data/parts.rds")
parts %>%
head(3)
part_categories <- readRDS("data/part_categories.rds")
part_categories %>%
head(3)
colnames(parts)
colnames(part_categories)
# Add the correct verb, table, and joining column
parts %>%
inner_join(part_categories, by = c("part_cat_id" = "id"))
# Use the suffix argument to replace .x and .y suffixes
parts %>%
inner_join(part_categories, by = c("part_cat_id" = "id"), suffix = c("_part", "_category"))
